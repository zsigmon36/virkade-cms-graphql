type User {
    typeId: Long!
	addressId: Long
	statusId: Long!
	emailAddress: String!
	userName: String!
	password: String!
    firstName: String!
    lastName: String!
	gender: String
	age: Long
	height: Long
	weight: Long
	idp: Float
	tcAgree: Boolean
	liabilityAgree: Boolean
	emailVerified: Boolean
	playedBefore: Boolean
	lastLogin: Date
	reServices: Boolean
	canContact: Boolean
	audit: Audit
}

type PlaySession {
	sessionId: Long!
	user: User!
	locationId: Long!
	startDate: Date!
	endDate: Date!
	audit: Audit
}

type Audit {
	createdAt: Date!
	updatedAt: Date!
    createdBy: String!
    updatedBy: String!
}

type Query {
  allUsers: [User]
  getUserByUsername(username: String!): [User]
  getUser(userId: Long!): [User]
  getUserByEmailAddress(emailAddress: String!): [User]
  getUserSessions(username: String!): [PlaySession]
}

type Mutation {
  createUser(user: User, requestor: String!): User
  updateUser(user: User, requestor: String!): User
  createSessions(username: String!, startDate: Date!, endDate: Date!, locationId: Long!): PlaySession
}

schema {
  query: Query
  mutation: Mutation
}

scalar Date
scalar Long
#scalar Audit