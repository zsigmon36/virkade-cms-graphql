type User {
	userId: Long!
    type: Type
	address: Address
	status: Status
	emailAddress: String
	sessions: [PlaySession]
	comments: [Comment]
	phoneNumbers: [Phone]
	username: String!
	securityQuestion: String
    firstName: String
    lastName: String
	gender: String
	age: Long
	height: Long
	weight: Long
	idp: Float
	emailVerified: Boolean
	playedBefore: Boolean
	lastLogin: Date
	reServices: Boolean
	canContact: Boolean
	liableAgree: Boolean
	tcAgree: Boolean
	audit: Audit
}

input InputUser {
	userId: Long
    typeCode: String
	addressId: Long
	statusId: Long
	emailAddress: String
	username: String
	password: String
	securityQuestion: String
	securityAnswer: String
    firstName: String
    lastName: String
	gender: String
	age: Long
	height: Long
	weight: Long
	idp: Float
	emailVerified: Boolean
	playedBefore: Boolean
	reServices: Boolean
	canContact: Boolean
}

type Legal {
	legalDocId: Long
	user: User
	type: Type
	agree: Boolean
	activeDate: Date
	expireDate: Date
	enabled: Boolean
	audit: Audit
}
input InputLegal {
	username: String
	typeCode: String
	agree: Boolean
	activeDate: Date
	expireDate: Date
	enabled: Boolean
}

type Status {
	statusId: Long
	name: String
	description: String
	code: String
	audit: Audit
}

type Comment {
	commentId: Long
	userId: Long
	username: String
	type: Type
	commentContent: String
	audit: Audit
}

input InputComment {
	username: String!
	typeCode: String!
	commentContent: String!
}

type Phone {
	phoneId: Long
	userId: Long
	username: String
	type: Type
	number: String
	countryCode: Int
	audit: Audit
}

input InputPhone {
	username: String!
	typeCode: String!
	number: String!
	countryCode: Int
}

type PlaySession {
	sessionId: Long
	userId: Long
	emailAddress: String
	username: String
    firstName: String
    lastName: String
	location: Location
	payed: Boolean
	activity: Activity
	startDate: Date
	endDate: Date
	audit: Audit
}

input InputPlaySession {
 	locationName: String!
	activityName: String!
	startDate: Date!
	endDate: Date!
	payed: Boolean!
	username: String!
}

type Activity {
	activityId: Long
	name: String
	description: String
	webSite: String
	supportContact : String
	creator: String
	costpm: Float
	setupMin: Int
	enabled: Boolean
	audit: Audit
}

type Location {
	locationId: Long
	address: Address
	taxRate: Float
	name: String
	description: String
	phoneNum : String
	manager: String
	enabled: Boolean
	audit: Audit
}

type Address {
	addressId: Long
	state: State
	type: Type
	street: String
	unit: String
	apt: String
	city: String
	postalCode: String
	audit: Audit
}

input InputAddress {
	addressId: Long
	stateId: Long
	stateCode: String
	typeCode: String
	street: String
	unit: String
	apt: String
	city: String
	postalCode: String
}

input InputLocation {
	locationId: Long
	taxRate: Float
	name: String
	description: String
	phoneNum : String
	manager: String
	stateId: Long
	street: String
	unit: String
	apt: String
	city: String
	postalCode: String
}

type Region {
	regionId: Long
	name: String
	description: String
	regionCode: String
	audit: Audit
}

type Country {
	countryId: Long
	region: Region
	name: String
	description: String
	a2: String
	a3: String
	audit: Audit
}

type State {
	stateId: Long
	country: Country
	name: String
	abbreviation: String
	stateCode: String
	audit: Audit
}

type Type {
	typeId: Long
	name: String
	description: String
	code: String
	audit: Audit
}

type Audit {
	createdAt: Date!
	updatedAt: Date!
    createdBy: String!
    updatedBy: String!
}

input AuthData {
	username: String!
	password: String
	securityQuestion: String
	securityAnswer: String
}

type AuthToken {
	username: String!
	token: String!
	createdDate: Date!
}

type Query {
  getUsersByEmailAddress(emailAddress: String!): [User]
  getUserById(userId: Long!): User
  getUserSessions(username: String!, dateRequested: Date): [PlaySession]
  getUserByUsername(username: String!): User
  getUserComments(username: String!): [Comment]
  getCountries: [Country]
  getAllStates: [State]
  getAllActivities: [Activity]
  getAllLocations: [Location]
  getLocation(locationId: Long!): Location
  getAvailableSessions(dateRequested: Date, locationId: Long, activityId: Long): [PlaySession]
  getPendingSessions(dateRequested: Date, locationId: Long, activityId: Long, payed: Boolean): [PlaySession]
  searchUsers(firstName: String, lastName: String, emailAddress: String, username: String, inputAddress: InputAddress, count: Int=50, offset: Int=0): [User]
  getTypeByCode(code: String!): Type
  getLegalsByUser(user: InputUser!): [Legal] 
  getPhonesByUser(user: InputUser!): [Phone]
  getPhonesByUsername(username: String!): [Phone]
  checkSession: Boolean
}

type Mutation {
  createNewUser(emailAddress: String!,	authData: AuthData!, firstName: String!, lastName: String!): User
  updateUser(inputUser: InputUser!): User
  signIn(authData: AuthData!): AuthToken
  recoverySignIn(authData: AuthData!): Boolean
  signOut(username: String!): String
  addPhone(inputPhone: InputPhone!): Phone
  addComment(inputComment: InputComment!): Comment
  setNewPassword(username: String!, passCode: String!, password: String!): Boolean
  setSecurityQA(username: String!, securityQ: String!, securityA: String!): Boolean
  addUserAddress(inputAddress: InputAddress!): Address
  addUserLegalDoc(inputLegal: InputLegal!): Legal
  addUserSession(inputPlaySession: InputPlaySession!): PlaySession
  deleteAllSessions(dateRequested: Date, locationName: String, activityName: String): Boolean
  addUpdateLocation(inputLocation: InputLocation!): Location
}

schema {
  query: Query
  mutation: Mutation
}

scalar Date
scalar Long