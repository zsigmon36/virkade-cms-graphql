type User {
	userId: Long!
    typeId: Long!
	addressId: Long
	statusId: Long!
	emailAddress: String!
	userName: String!
    firstName: String!
    lastName: String!
	gender: String
	age: Long
	height: Long
	weight: Long
	idp: Float
	tcAgree: Boolean!
	liabilityAgree: Boolean!
	emailVerified: Boolean!
	playedBefore: Boolean!
	lastLogin: Date
	reServices: Boolean!
	canContact: Boolean!
	audit: Audit
}

type Audit {
	createdAt: Date!
	updatedAt: Date!
    createdBy: String!
    updatedBy: String!
}

input AuthData {
	userName: String!
	password: String!
}

type AuthToken {
	userName: String!
	token: String!
	createdDate: Date!
}

type Query {
  allUsers: [User]
}

type Mutation {
  createNewUser(emailAddress: String!,	authData: AuthData!, firstName: String!, lastName: String!, requestor: String!): User
  signIn(authData: AuthData!) : AuthToken
}

schema {
  query: Query
  mutation: Mutation
}

scalar Date
scalar Long