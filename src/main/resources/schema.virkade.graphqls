type User {
	userId: Long
    type: Type!
	address: Address
	status: Status!
	emailAddress: String!
	sessions: [PlaySession]
	userName: String!
	securityQuestion: String
    firstName: String!
    lastName: String!
	gender: String
	age: Long
	height: Long
	weight: Long
	idp: Float
	tcAgree: Boolean!
	liabilityAgree: Boolean!
	emailVerified: Boolean!
	playedBefore: Boolean!
	lastLogin: Date
	reServices: Boolean!
	canContact: Boolean!
	audit: Audit
}

input InputUser {
    typeCode: String
	addressId: Long
	statusId: Long
	emailAddress: String
	userName: String!
	password: String
	securityQuestion: String
	securityAnswer: String
    firstName: String
    lastName: String
	gender: String
	age: Long
	height: Long
	weight: Long
	idp: Float
	tcAgree: Boolean!
	liabilityAgree: Boolean!
	emailVerified: Boolean!
	playedBefore: Boolean!
	reServices: Boolean!
	canContact: Boolean!
}

type Legal {
	legalDocId: Long
	user: User
	type: Type
	name: String
	description: String
	content: String
	activeDate: Date
	expireDate: Date
	enabled: Boolean
	audit: Audit
}

type Status {
	statusId: Long
	name: String
	description: String
	code: String
	audit: Audit
}

type Comment {
	commentId: Long
	user: User
	type: Type
	commentContent: String
	audit: Audit
}

type Phone {
	phoneId: Long
	user: User
	type: Type
	number: Int
	countryCode: Int
	audit: Audit
}

type PlaySession {
	user: User
	location: Location
	games: [Game]
	startDate: Date
	endDate: Date
	audit: Audit
}
type Game {
	gameId: Long
	name: String
	description: String
	webSite: String
	cost: Float
	sessions: [PlaySession]
	creator: String
	enabled: Boolean
	audit: Audit
}

type Location {
	locationId: Long
	address: Address
	name: String
	description: String
	phoneNum : Int
	manager: String
	enabled: Boolean
	audit: Audit
}

type Address {
	addressId: Long
	state: State
	type: Type
	street: String
	unit: String
	apt: String
	city: String
	postalCode: Long
	audit: Audit
}

type Region {
	regionId: Long
	name: String
	description: String
	regionCode: String
	audit: Audit
}

type Country {
	countryId: Long
	region: Region
	name: String
	description: String
	a2: String
	a3: String
	audit: Audit
}

type State {
	stateId: Long
	country: Country
	name: String
	description: String
	stateCode: String
	audit: Audit
}

type Type {
	typeId: Long
	name: String
	description: String
	code: String
	audit: Audit
}

type Audit {
	createdAt: Date!
	updatedAt: Date!
    createdBy: String!
    updatedBy: String!
}

input AuthData {
	userName: String!
	password: String!
	securityQuestion: String
	securityAnswer: String
}

type AuthToken {
	userName: String!
	token: String!
	createdDate: Date!
}

type Query {
  allUsers: [User]
  getUserByEmailAddress(emailAddress: String!): [User]
  getUserById(userId: Long!): User
  getUserSessions(userName: String!): [PlaySession]
  getUser(userName: String): User
}

type Mutation {
  createNewUser(emailAddress: String!,	authData: AuthData!, firstName: String!, lastName: String!): User
  signIn(authData: AuthData!) : AuthToken
  updateUser(inputUser: InputUser!): User
}

schema {
  query: Query
  mutation: Mutation
}

scalar Date
scalar Long